{
  "name": "angular-ui-publisher",
  "version": "1.2.6",
  "description": "Helper component for building and publishing your angular modules as bower components",
  "main": "Gulpfile.js",
  "dependencies": {
    "dateformat": "*",
    "event-stream": "*",
    "gulp": "*",
    "gulp-rename": "*",
    "gulp-rimraf": "*",
    "gulp-util": "*",
    "lodash.after": "*",
    "lodash.assign": "*",
    "lodash.template": "*",
    "shelljs": "*",
    "yargs": "*"
  },
  "devDependencies": {
    "jshint": "*",
    "jshint-stylish": "*"
  },
  "scripts": {
    "test": "jshint --reporter node_modules/jshint-stylish/stylish.js Gulpfile.js lib/*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/angular-ui/angular-ui-publisher.git"
  },
  "keywords": [
    "angular-ui",
    "component",
    "publisher",
    "travis",
    "bower"
  ],
  "author": {
    "name": "Douglas Duteil"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/angular-ui/angular-ui-publisher/issues"
  },
  "homepage": "https://github.com/angular-ui/angular-ui-publisher",
  "readme": "# Angular UI Publisher [![Build Status](https://travis-ci.org/angular-ui/angular-ui-publisher.png?branch=master)](https://travis-ci.org/angular-ui/angular-ui-publisher) [![NPM version](https://badge.fury.io/js/angular-ui-publisher.png)](http://badge.fury.io/js/angular-ui-publisher)\n\nHelper component for building and publishing your angular modules as bower components\n\n## Goal\n\nThe goal of all this is to automatize the construction of this type of repo tree.\n\n```\n+ git repo\n  + master (src) branch // build directory is ignored\n    - tag: src1.0.x\n    - tag: src1.1.x\n  + gh-pages (doc) branch\n  + bower (build) branch // build directory is committed\n    - tag: v1.0.x\n    - tag: v1.1.x\n  + bower-subcomponent-a (like angular-ui-event) branch\n    - tag: subcomponent-a-1.0.x\n    - tag: subcomponent-a-1.1.x\n  + bower-subcomponent-b (like angular-ui-event) branch\n    - tag: subcomponent-b-1.0.x\n    - tag: subcomponent-b-1.1.x\n```\n\nSo the `master` branch is free of builds files, the `gh-pages` branch is free of source files and the `bower` branches are only containing the vital part of a component. This way if a repo produces separate components, I could simply create multiple bower-branches for each produced component. Like for the component `subcomponent-a`, the branch `bower-subcomponent-a` with the specific version tags prefixed with `bower-subcomponent-a-`\n\nLike so, throw bower you can install\n```sh\n# All the repo\nbower install <package>#master\n\n# The latest bower build\nbower install <package>#bower\n\n# A specific bower build\nbower install <package>#v0.0.8\n\n# The latest bower build of a sub component\nbower install <package>#bower-subcomponent-a\n\n# A specific bower build of a sub component\nbower install <package>#subcomponent-a-0.0.8\n```\n\n## Usage\n\nAdd it as a npm component:\n\n```\nnpm install angular-ui-publisher --save-dev\n```\n\nYou have now access to the gulp build system in :  \n`./node_modules/angular-ui-publisher/node_modules/.bin/gulp`.  \nLike it's pretty far and **you're current path must be in the `/node_modules/angular-ui-publisher`** it's safer to use it in another build system to do the thing.\n\n### Play nice with Gulp\n\nThis project is itself made with Gulp :)  \nStill, here is some handy functions to do the work.\n\n```javascript\n//\n// ACCESS TO THE ANGULAR-UI-PUBLISHER\nfunction targetTask(task){\n  return function(done){\n\n    var spawn = require('child_process').spawn;\n    var path = require('path');\n\n    spawn(path.resolve(process.cwd(), './node_modules/.bin/gulp'), process.argv.slice(2), {\n      cwd : './node_modules/angular-ui-publisher',\n      stdio: 'inherit'\n    }).on('close', done);\n  }\n}\n\n\ngulp.task('build', targetTask('build'));\ngulp.task('publish', targetTask('publish'));\n```\n\nand use\n\n```sh\n./node_modules/.bin/gulp build --branch=bower\n# or\n./node_modules/.bin/gulp build --branch=gh-pages\n# or\n./node_modules/.bin/gulp publish --branch=bower\n# or\n./node_modules/.bin/gulp publish --branch=gh-pages\n```\n\n\n### Hack nice with Grunt\n\nFor Grunt you can do this :\n\n```javascript\n//\n// HACK TO ACCESS TO THE ANGULAR-UI-PUBLISHER\nfunction fakeTargetTask(prefix){\n  return function(){\n\n    if (this.args.length !== 1) return grunt.log.fail('Just give the name of the ' + prefix + ' you want like :\\ngrunt ' + prefix + ':bower');\n\n    var done = this.async();\n    var spawn = require('child_process').spawn;\n    spawn('./node_modules/.bin/gulp', [ prefix, '--branch='+this.args[0] ].concat(grunt.option.flags()), {\n      cwd : './node_modules/angular-ui-publisher',\n      stdio: 'inherit'\n    }).on('close', done);\n  };\n}\n\ngrunt.registerTask('build', fakeTargetTask('build'));\ngrunt.registerTask('publish', fakeTargetTask('publish'));\n//\n```\n\nand use\n\n```sh\ngrunt build:bower\n# or\ngrunt build:gh-pages\n# or\ngrunt publish:bower\n# or\ngrunt publish:gh-pages\n```\n\n## Tasks\n\n### build\n\nIt's just coping or processing template files to the `out/built/<branch_name>` with `<branch_name>` given by the flag `--branch`.\n\n### publish\n\nIt's acting in `out/clones/<branch_name>`.\n * Clones the given `<branch_name>`.\n * Copy the built files into it.\n * Commits the result (with the current build number on TravisCI)\n * Tags it with the current version (given by the package.json)\n * Push it (only on TravisCI for now)\n\n## Building configuration\n\nThe component publisher can use a configuration file named `publish.js` to specify various thing to use while building the branches.  \nThis file must return a object with the configuration like so :\n\n```javascript\nmodule.exports = function() {\n  return {\n    // ...\n  };\n};\n```\n\nThis config object can content the following key:\n\n```javascript\n{\n  humaName : String,\n  // the name used as title in the gh-pages (ex: 'UI.Utils')\n\n  repoName : String,\n  // the repo name used in github links in the gh-pages (ex: 'ui-utils')\n\n  inlineHTML : String,\n  // The html to inline in the index.html file in the gh-pages\n  // (ex: 'Hello World' or fs.readFileSync(__dirname + '/demo/demo.html'))\n\n  inlineJS : String,\n  // The javascript to inline at the end of the index.html file in the gh-pages\n\n  js : Array.of(String) | Function,\n  // The js files to use in the gh-pages, loaded after angular by default (ex: ['dist/ui-utils.js'])\n  // or\n  // function that returns the final array of files to load \n  // (ex: function(defaultJsFiles) { return ['beforeFile.js'].concat(defaultJsFiles); })\n\n  css : Array.of(String),\n  // The css files to use in the gh-pages\n\n  tocopy : Array.of(String),\n  // Additional files to copy in the vendor directory in the gh-pages\n\n\n\n  main_dist_dir : String,\n  // directory used to store the main sources in the './dist' directory (ex: 'main')\n\n  sub_dist_dir : String,\n  // directory used to store the sub component sources in the './dist' directory (ex: 'sub')\n\n  bowerData : {\n    // Bower data to overwrite.\n    // (ex: { name: 'my-component', main: './my-component.js' })\n  }\n\n  subcomponents : {  // Collection of sub component\n    \"<sub component name>\" : {\n      // Bower data to overwrite.\n      // (ex: { name: 'my-component', main: './my-component.js' })\n    }\n  }\n\n}\n```\n\n\n## CLI flags\n\n*--branch*\nAllows you to specify the branch to take care of.\n\n* `build --branch=gh-pages` or `build --branch=bower`  \nwill build the `gh-pages` or the `bower` files in `./out/built`\n* `publish --branch=gh-pages` or `publish --branch=bower`  \nwill publish the `gh-pages` or the `bower` files in `./out/clones`\n\n### Made for Travis-CI\n\n**It's working with ssh deploy key ! (so even organization can make Travis commit on them repos.**  \nYou can find a quick tuto [here](https://gist.github.com/douglasduteil/5525750#file-travis-secure-key-sh).\n\nAfter you added your deploy key to GitHub and Travis (in  `.travis.yml`).  \nAdd a global value with your repo name, like :\n\n```\nenv:\n  global:\n  - REPO=\"git@github.com:<org>/<repo>.git\"\n  - secure: ! 'MR37oFN+bprRlI1/YS3...etc...\n```\n\nThen add the authentication script that will automatically decode your deploy key (passed encoded in your .travis.yml). And try SSH to  Github.\n\n```yaml\nafter_success:\n- \"./node_modules/angular-ui-publisher/travis/authentication.sh || exit 0\"\n- \"grunt dist build:gh-pages publish:gh-pages build:bower publish:bower\"\n```\n\nI recommend adding a ` || exit 0` after the authentication script to make sure that if your access is denied no building and publishing will be made.  \nIf you need to change the restriction to another branch that *master* by default, use the environment variable `MAIN_BRANCH` like below :\n\n```yaml\nenv:\n  global:\n  - MAIN_BRANCH=develop\n  - REPO=\"git@github.com:<org>/<repo>.git\"\n  - secure: ! 'MR37oFN+bprRlI1/YS3...etc...\n```\n",
  "readmeFilename": "README.md",
  "_id": "angular-ui-publisher@1.2.6",
  "_shasum": "481e5118bdf51135859aba79a0ef7a25ec21307a",
  "_resolved": "git://github.com/angular-ui/angular-ui-publisher#06e016272e0064eb030f52cffbe00daa48b56e20",
  "_from": "git://github.com/angular-ui/angular-ui-publisher#06e016272e0064eb030f52cffbe00daa48b56e20",
  "_fromGithub": true
}
